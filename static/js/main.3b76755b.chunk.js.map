{"version":3,"sources":["index.js"],"names":["Square","val","onClick","className","Board","squares","renderSquare","i","Game","useState","nextPlayer","setNextPlayer","isGameOver","setGameOver","status","setStatus","Array","fill","history","setHistory","step","setStep","useEffect","winner","lines","length","a","b","c","calculateWinner","current","slice","splice","prevState","newHistory","push","map","key","text","goto","console","log","ReactDOM","render","document","getElementById"],"mappings":"0MAMMA,EAAS,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,QAClB,OACI,wBAAQC,UAAU,SAASD,QAASA,EAApC,SACMD,KAKRG,EAAQ,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAASH,EAAa,EAAbA,QACfI,EAAe,SAACC,GAClB,OAAO,cAACP,EAAD,CAAQC,IAAKI,EAAQE,GAAIL,QAAS,kBAAMA,EAAQK,OAG3D,OACI,qCACI,sBAAKJ,UAAU,YAAf,UACMG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEnB,sBAAKH,UAAU,YAAf,UACMG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEnB,sBAAKH,UAAU,YAAf,UACMG,EAAa,GACbA,EAAa,GACbA,EAAa,UAMzBE,EAAO,WACT,MAAoCC,mBAAS,KAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA4BJ,mBAAS,2FAAsC,MAAfC,EAAqB,IAAM,MAAvF,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA8BN,mBAAS,CAACO,MAAM,GAAGC,KAAK,QAAtD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBV,mBAAS,GAAjC,mBAAOW,EAAP,KAAaC,EAAb,KAsEA,OAVAC,qBAAU,WACN,IAAMC,EArBc,SAAClB,GAWrB,IAVA,IAAMmB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACnC,kBAAkBiB,EAAMjB,GAAxB,GAAOmB,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIvB,EAAQqB,IAAMrB,EAAQqB,KAAOrB,EAAQsB,IAAMtB,EAAQqB,KAAOrB,EAAQuB,GAClE,OAAOvB,EAAQqB,GAGvB,OAAO,KAIQG,CAAgBX,EAAQE,IACnCG,GACAR,EAAU,+CAAcQ,GACxBV,GAAY,IAEZE,EAAU,2FAAsC,MAAfL,EAAqB,IAAM,QAEjE,CAACA,EAAYQ,EAASE,IAGrB,sBAAKjB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACC,EAAD,CAAOC,QAASa,EAAQE,GAAOlB,QAvEvB,SAACK,GACjB,IAAIuB,EAAUZ,EAAQE,GAAMW,QACxBnB,GAAckB,EAAQvB,KAGtBc,EAAQD,EAAO,GACfT,EAA6B,MAAfD,EAAqB,IAAM,KACzCoB,EAAQE,OAAOzB,EAAG,EAAGG,GACrBS,GAAW,SAACc,GACR,IAAMC,EAAU,YAAOD,GAEvB,OADAC,EAAWC,KAAKL,GACTI,WA8DX,sBAAK/B,UAAU,YAAf,UACI,qBAAKA,UAAU,SAAf,SAAyBW,IACzB,6BA/CGI,EAAQkB,KAAI,SAACnC,EAAKoC,GACzB,IAAIC,EAAe,IAARD,EAAY,8HAA4B,+EAAqBA,EACxE,OAAQ,6BACI,wBAAQnC,QAAS,kBAdjCmB,EADgBkB,EAekCF,GAblD1B,EAAc4B,EAAO,EAAI,IAAM,KAC/BpB,GAAW,SAACc,GACR,IAAMC,EAAU,YAAOD,GAEvB,OADAC,EAAWF,SAASO,EAAML,EAAWT,OAAO,GACrCS,UAEXM,QAAQC,IAAI,eAAgBvB,GARb,IAACqB,GAeA,SAAyCD,KADpCD,eAqD7BK,IAASC,OACL,cAACnC,EAAD,IACAoC,SAASC,eAAe,W","file":"static/js/main.3b76755b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\nconst Square = ({val, onClick}) => {\r\n    return (\r\n        <button className=\"square\" onClick={onClick} >\r\n            { val }\r\n        </button>\r\n    )\r\n}\r\n\r\nconst Board = ({squares, onClick}) => {\r\n    const renderSquare = (i) => {\r\n        return <Square val={squares[i]} onClick={() => onClick(i)} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"board-row\">\r\n                { renderSquare(0) }\r\n                { renderSquare(1) }\r\n                { renderSquare(2) }\r\n            </div>\r\n            <div className=\"board-row\">\r\n                { renderSquare(3) }\r\n                { renderSquare(4) }\r\n                { renderSquare(5) }\r\n            </div>\r\n            <div className=\"board-row\">\r\n                { renderSquare(6) }\r\n                { renderSquare(7) }\r\n                { renderSquare(8) }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Game = () => {\r\n    const [nextPlayer, setNextPlayer] = useState('X');\r\n    const [isGameOver, setGameOver] = useState(false);\r\n    const [status, setStatus] = useState('Следующий игрок: ' + (nextPlayer === 'X' ? 'X' : 'O'));\r\n    const [history, setHistory] = useState([Array(9).fill(null)]);\r\n    const [step, setStep] = useState(0);\r\n\r\n    const handleClick = (i) => {\r\n        let current = history[step].slice();\r\n        if (isGameOver || current[i]) {\r\n            return;\r\n        } else {\r\n            setStep(step + 1)\r\n            setNextPlayer(nextPlayer === 'X' ? 'O' : 'X');\r\n            current.splice(i, 1, nextPlayer);\r\n            setHistory((prevState) => {\r\n                const newHistory = [...prevState];\r\n                newHistory.push(current);\r\n                return newHistory;\r\n            });\r\n        }\r\n    }\r\n    \r\n    const switchStep = (goto) => {\r\n        setStep(goto);\r\n        setNextPlayer(goto % 2 ? 'O' : 'X');\r\n        setHistory((prevState) => {\r\n            const newHistory = [...prevState];\r\n            newHistory.splice(++goto, newHistory.length-1);\r\n            return newHistory;\r\n        });\r\n        console.log('history === ', history);\r\n    }\r\n\r\n    const getSteps = () => {\r\n        let list = history.map((val, key) => {\r\n            let text = key === 0 ? 'Вернуться к началу игры' : 'Перейти к ходу #' + key;\r\n            return  <li key={key}>\r\n                        <button onClick={() => switchStep(key)}>{text}</button>\r\n                    </li>\r\n        })\r\n        return list;\r\n    }\r\n    \r\n    \r\n    const calculateWinner = (squares) => {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const winner = calculateWinner(history[step]);\r\n        if (winner) {\r\n            setStatus('Выиграл: ' + winner);\r\n            setGameOver(true);\r\n        } else {\r\n            setStatus('Следующий игрок: ' + (nextPlayer === 'X' ? 'X' : 'O'));\r\n        }\r\n    }, [nextPlayer, history, step])\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board squares={history[step]} onClick={handleClick}/>\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div className=\"status\">{status}</div>\r\n                <ol>{getSteps()}</ol>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}